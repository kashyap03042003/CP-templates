#include <bits/stdc++.h>
using namespace std;

const int MAXN = 1e5 + 5;

vector<int> adj[MAXN];
int depth[MAXN], parent[MAXN], chainHead[MAXN], chainInd[MAXN], posInBase[MAXN], baseArray[MAXN], subsize[MAXN], chainSize[MAXN], chainNum = 1, pos = 1;

// Segment Tree
const int MAX_SEG_TREE = 4 * MAXN;
int segTree[MAX_SEG_TREE];

// Function to update the segment tree
void update(int node, int start, int end, int idx, int val) {
    if (start == end) {
        segTree[node] = val;
        return;
    }
    int mid = (start + end) / 2;
    if (idx <= mid) update(2 * node, start, mid, idx, val);
    else update(2 * node + 1, mid + 1, end, idx, val);
    segTree[node] = segTree[2 * node] + segTree[2 * node + 1];
}

// Function to query the segment tree
int query(int node, int start, int end, int l, int r) {
    if (r < start || end < l) return 0;
    if (l <= start && end <= r) return segTree[node];
    int mid = (start + end) / 2;
    return query(2 * node, start, mid, l, r) + query(2 * node + 1, mid + 1, end, l, r);
}

// Function to find the LCA (Lowest Common Ancestor) using DFS
int LCA(int u, int v) {
    while (chainInd[u] != chainInd[v]) {
        if (depth[chainHead[chainInd[u]]] < depth[chainHead[chainInd[v]]]) {
            v = parent[chainHead[chainInd[v]]];
        } else {
            u = parent[chainHead[chainInd[u]]];
        }
    }
    return (depth[u] < depth[v]) ? u : v;
}

// Function to decompose the tree into chains
void HLD(int curNode, int cost, int prev) {
    if (chainHead[chainNum] == -1) {
        chainHead[chainNum] = curNode;
    }
    chainInd[curNode] = chainNum;
    posInBase[curNode] = pos;
    baseArray[pos++] = cost;

    int heavyChild = -1, maxSubsize = -1;
    for (int next : adj[curNode]) {
        if (next != prev && subsize[next] > maxSubsize) {
            maxSubsize = subsize[next];
            heavyChild = next;
        }
    }

    if (heavyChild != -1) {
        HLD(heavyChild, cost, curNode);
    }

    for (int next : adj[curNode]) {
        if (next != prev && next != heavyChild) {
            chainNum++;
            HLD(next, cost, curNode);
        }
    }
}

// Function to query the path between two nodes
int queryPath(int u, int v) {
    int lca = LCA(u, v);
    int ans = query(1, 1, pos - 1, posInBase[u], posInBase[lca]) + query(1, 1, pos - 1, posInBase[v], posInBase[lca]) - baseArray[posInBase[lca]];
    return ans;
}

// Function to update the value of a node
void updateNode(int u, int val) {
    update(1, 1, pos - 1, posInBase[u], val);
}

// Function to initialize HLD
void initHLD(int root, int n) {
    memset(chainHead, -1, sizeof(chainHead));
    chainNum = 1;
    pos = 1;

    HLD(root, 0, -1);

    // Build segment tree on the baseArray
    for (int i = 1; i < pos; ++i) {
        update(1, 1, pos - 1, i, baseArray[i]);
    }
}

int main() {
    int n; // Number of nodes
    cin >> n;

    for (int i = 1; i < n; ++i) {
        int u, v;
        cin >> u >> v;
        adj[u].push_back(v);
        adj[v].push_back(u);
    }

    // Assuming the tree is rooted at node 1
    int root = 1;

    // Calculate the depth and subtree size of each node using DFS
    function<void(int, int)> dfs = [&](int cur, int prev) {
        subsize[cur] = 1;
        for (int next : adj[cur]) {
            if (next != prev) {
                depth[next] = depth[cur] + 1;
                parent[next] = cur;
                dfs(next, cur);
                subsize[cur] += subsize[next];
            }
        }
    };

    dfs(root, -1);

    // Initialize HLD
    initHLD(root, n);

    // Example queries
    int u, v;
    cin >> u >> v;
    cout << queryPath(u, v) << endl;

    int nodeToUpdate, newVal;
    cin >> nodeToUpdate >> newVal;
    updateNode(nodeToUpdate, newVal);

    cout << queryPath(u, v) << endl;

    return 0;
}
