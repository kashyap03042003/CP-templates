const int MAXN = 1e5+5;
int segtree[4*MAXN];

void build(int node, int start, int end, int arr[]) {
    if (start == end) {
        segtree[node] = arr[start];
        return;
    }
    int mid = (start + end) / 2;
    build(2*node, start, mid, arr);
    build(2*node + 1, mid + 1, end, arr);
    segtree[node] = segtree[2*node] + segtree[2*node + 1];
}

int query(int node, int start, int end, int l, int r) {
    if (r < start || end < l) return 0;
    if (l <= start && end <= r) return segtree[node];
    int mid = (start + end) / 2;
    return query(2*node, start, mid, l, r) + query(2*node + 1, mid + 1, end, l, r);
}

void update(int node, int start, int end, int idx, int val) {
    if (start == end) {
        segtree[node] = val;
        return;
    }
    int mid = (start + end) / 2;
    if (idx <= mid) update(2*node, start, mid, idx, val);
    else update(2*node + 1, mid + 1, end, idx, val);
    segtree[node] = segtree[2*node] + segtree[2*node + 1];
}
