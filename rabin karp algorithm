#include <iostream>
#include <string>
#include <cmath>

class KarpRabin {
private:
    const int PRIME = 101;

    double calculateHash(const std::string& str) {
        double hash = 0;
        for (int i = 0; i < str.length(); ++i) {
            hash += str[i] * std::pow(PRIME, i);
        }
        return hash;
    }

    double updateHash(double prevHash, char oldChar, char newChar, int patternLength) {
        double newHash = (prevHash - oldChar) / PRIME;
        newHash = newHash + newChar * std::pow(PRIME, patternLength - 1);
        return newHash;
    }

public:
    void search(const std::string& text, const std::string& pattern) {
        int patternLength = pattern.length();
        double patternHash = calculateHash(pattern);
        double textHash = calculateHash(text.substr(0, patternLength));

        for (int i = 0; i <= text.length() - patternLength; ++i) {
            if (textHash == patternHash) {
                if (text.substr(i, patternLength) == pattern) {
                    std::cout << "Pattern found at index " << i << std::endl;
                }
            }

            if (i < text.length() - patternLength) {
                textHash = updateHash(textHash, text[i], text[i + patternLength], patternLength);
            }
        }
    }
};

int main() {
    KarpRabin kr;
    std::string text = "ABABDABACDABABCABAB";
    std::string pattern = "ABABCABAB";
    kr.search(text, pattern);
    return 0;
}
